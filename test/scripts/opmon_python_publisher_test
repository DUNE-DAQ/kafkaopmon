#!/usr/bin/env python3

from kafkaopmon.OpMonPublisher import OpMonPublisher
from opmonlib.opmon_entry_pb2 import OpMonEntry 
from opmonlib.opmon.test_pb2 import TestInfo
from opmonlib.opmon.test_pb2 import ComplexInfo
from google.protobuf.message import Message as msg
import time
import click

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

@click.command(context_settings=CONTEXT_SETTINGS)
@click.option('--kafka-address', type=click.STRING, default="monkafka.cern.ch", help="address of the kafka broker")
@click.option('--kafka-port', type=click.INT, default=30092, help='port of the kafka broker')
@click.option('--topic', type=click.STRING, default="monitoring.opmon_stream.test")
@click.option('-n/', '--number-messages', type=click.INT, default=10000)
def test(kafka_address:str, kafka_port:int, topic:str, number_messages:int):
    bootstrap = kafka_address + ":" + str(kafka_port)
    pub = OpMonPublisher(
        default_topic = topic,
        bootstrap = bootstrap
    )
    test_complex_info = init_nested_msg()
    test_test_info = init_simple_msg()
    for i in range(number_messages):
        # Test nested messages
        test_complex_info.sub_message.int_example = i
        pub.publish(
            session = "test_session",
            application = "opmon_python_publisher_test",
            message = test_complex_info
        )
        # Test non-nested messages
        test_test_info.int_example = i
        pub.publish(
            session = "test_session",
            application = "opmon_python_publisher_test",
            message = test_test_info
        )        

    # Test broken case for completion
    try:
        pub.publish(
            session = "test_session",
            application = "opmon_python_publisher_test",
            message = 12345
        )
    except ValueError: # TODO - replace this with a unittest class object.
        time.sleep(1)
    else:
        raise TypeError("An unexpected type of exception has been raised, this code has a bug!")

def init_simple_msg() -> TestInfo:
    test_string = "kafkaopmon_python_test_string"
    test_double = 123.456789
    test_int = 0
    test_bool = False
    test_info = TestInfo(
        string_example = test_string,
        float_example = test_double,
        int_example = test_int,
        bool_example = test_bool
    )
    return test_info

def init_nested_msg() -> ComplexInfo:
    test_another_float = 9.87654321
    test_repeated_r_field = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    complex_info = ComplexInfo(
        another_float = test_another_float,
        sub_message = init_simple_msg(),
        r_field = test_repeated_r_field
    )
    return complex_info

if __name__ == '__main__':
    test(show_default=True, standalone_mode=True)
